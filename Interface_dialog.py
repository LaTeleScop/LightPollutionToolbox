# -*- coding: utf-8 -*-
"""
/***************************************************************************
 InterfaceDialog
                                 A QGIS plugin
 Interface
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-03-08
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Interface
        email                : Interface
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from .qgis_lib_mc import utils, qgsUtils, qgsTreatments, feedbacks
from qgis.core import QgsApplication, QgsProcessingContext
from .algs import LightPollutionToolbox_provider

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'Interface_dialog_base.ui'))


class InterfaceDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(InterfaceDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.pushButtonRun.clicked.connect(self.onPbRunClicked)
        
       
        
        # TODO : 2 radios butons ou 1 case à cocher ?
        self.radioButtonImportGrid.clicked.connect(self.onRbImportClicked)
        self.radioButtonCreateGrid.clicked.connect(self.onRbCreateClicked)
        

    def onPbRunClicked(self):
        print('RUN')
        
        ############################ TODO à mettre dans un fichier Contrôleur ####################################
        feedback = feedbacks.ProgressFeedback(self)
        step_feedback = feedbacks.ProgressMultiStepFeedback(2,feedback)
        step_feedback.setCurrentStep(0)
        
        context = QgsProcessingContext()
        context.setFeedback(feedback)
        
        # TODO : le résultat ne s'ajoute pas à la carte
        parameters = { LightPollutionToolbox_provider.StatisticsRadianceGrid.EXTENT_ZONE : "D:\Donnees\Zone_est\emprise_est_Montpelleir_reproj.shp",
                       LightPollutionToolbox_provider.StatisticsRadianceGrid.RASTER_INPUT : "D:\Donnees\JL107B_20191202_MOSAIC_RGB_calib_georef_L93_cor_ss_bruit_Montpellier.tif",
                       LightPollutionToolbox_provider.StatisticsRadianceGrid.DIM_GRID:50,
                       LightPollutionToolbox_provider.StatisticsRadianceGrid.TYPE_GRID:2,
                       LightPollutionToolbox_provider.StatisticsRadianceGrid.RED_BAND_INPUT:1,
                       LightPollutionToolbox_provider.StatisticsRadianceGrid.GREEN_BAND_INPUT:2,
                       LightPollutionToolbox_provider.StatisticsRadianceGrid.BLUE_BAND_INPUT:3,
                       LightPollutionToolbox_provider.StatisticsRadianceGrid.OUTPUT_STAT : "D:\Donnees\TEST.shp"}
        qgsTreatments.applyProcessingAlg("LPT","StatisticsRadianceGrid",parameters,
                                         context=context,feedback=feedback)
                     
        # parameters = { LightPollutionToolbox_provider.PretreatmentsDarkZones.EXTENT_ZONE : "D:\Donnees\Zone_est\emprise_est_Montpelleir_reproj.shp",
                       # LightPollutionToolbox_provider.PretreatmentsDarkZones.RASTER_INPUT : "D:\Donnees\JL107B_20200826_RGB_mosaic_georef_WGS84_calib1.tif",
                       # LightPollutionToolbox_provider.PretreatmentsDarkZones.RED_BAND_INPUT:1,
                       # LightPollutionToolbox_provider.PretreatmentsDarkZones.GREEN_BAND_INPUT:2,
                       # LightPollutionToolbox_provider.PretreatmentsDarkZones.BLUE_BAND_INPUT:3,
                       # LightPollutionToolbox_provider.PretreatmentsDarkZones.OUTPUT_RASTER : "D:\Donnees\TEST.tif"}
        # qgsTreatments.applyProcessingAlg("LPT","PretreatmentsDarkZones",parameters,
                                         # context=context,feedback=feedback)

        # qgsUtils.loadRasterLayer(out_path,loadProject=True)
        # parameters = { BioDispersal_algs.SelectVFieldAlg.INPUT : self.getItemInPath(item),
                       # BioDispersal_algs.SelectVFieldAlg.FIELD : item.dict["mode_val"],
                       # BioDispersal_algs.SelectVFieldAlg.GROUP : grp_name,
                       # BioDispersal_algs.SelectVFieldAlg.ASSOC : matrix,
                       # BioDispersal_algs.SelectVFieldAlg.OUTPUT : out_path }
        # qgsTreatments.applyProcessingAlg("BioDispersal","selectvfield",parameters,
                                         # context=context,feedback=feedback)
                                         
        #################################################################################################################

    def onRbImportClicked(self):
        if self.radioButtonImportGrid.isChecked():
            print('IMPORT GRID')
            self.stackedGridImportCreate.setCurrentWidget(self.widgetImportGrid)

    
    def onRbCreateClicked(self):
        if self.radioButtonCreateGrid.isChecked():
            print('CREATE GRID')
            self.stackedGridImportCreate.setCurrentWidget(self.widgetCreateGrid)
            
    