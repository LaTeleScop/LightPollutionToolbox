# -*- coding: utf-8 -*-

"""
/***************************************************************************
 LightPollutionToolbox
                                 A QGIS plugin
 Light pollution indicators (focus on public lighting)
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-04-20
        copyright            : (C) 2020 by Mathieu Chailloux
        email                : mathieu@chailloux.org
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Mathieu Chailloux'
__date__ = '2020-04-20'
__copyright__ = '(C) 2020 by Mathieu Chailloux'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from PyQt5.QtCore import QCoreApplication, QVariant
from qgis.core import (QgsProcessing,
                       QgsProcessingAlgorithm,
                       QgsProcessingUtils,
                       QgsProcessingException,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterCrs,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterVectorDestination,
                       QgsCoordinateReferenceSystem)

from ..qgis_lib_mc import utils, qgsUtils, qgsTreatments

class CreateMeshAlgorithm(QgsProcessingAlgorithm):
    
    OUTPUT = 'OUTPUT'
    INPUT = 'INPUT'
    EXTENT = 'EXTENT'
    CRS = 'CRS'
    SIZE = 'SIZE'
    
    DEFAULT_CRS = QgsCoordinateReferenceSystem("epsg:2154")
    
    def initAlgorithm(self, config=None):
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.EXTENT,
                self.tr('Extent layer')))
        self.addParameter(
            QgsProcessingParameterNumber(
                self.SIZE,
                self.tr("Mesh size (in georeferenced units, meters by default)"),
                type=QgsProcessingParameterNumber.Integer,
                defaultValue=1000))
        self.addParameter(
            QgsProcessingParameterCrs(
                self.CRS,
                description=self.tr("Output CRS"),
                defaultValue=self.DEFAULT_CRS))
                
        self.addParameter(
            QgsProcessingParameterVectorDestination(
                self.OUTPUT,
                self.tr('Output layer')))
        
    def processAlgorithm(self, parameters, context, feedback):
        extent_layer = self.parameterAsVectorLayer(parameters, self.EXTENT, context)
        size = self.parameterAsInt(parameters,self.SIZE,context)
        crs = self.parameterAsCrs(parameters,self.CRS,context)
        out = self.parameterAsOutputLayer(parameters,self.OUTPUT,context)
        
        extent_crs = extent_layer.dataProvider().crs()
        if extent_crs.authid() != crs.authid():
            reproj_path = QgsProcessingUtils.generateTempFilename('reproj.shp')
            qgsTreatments.applyReprojectLayer(extent_layer,
                crs,reproj_path,context=context,feedback=feedback)
            reprojected = qgsUtils.loadVectorLayer(reproj_path)
        else:
            reprojected = extent_layer
        extent = reprojected.extent()
        grid_path = QgsProcessingUtils.generateTempFilename('grid.shp')
        grid_layer = qgsTreatments.createGridLayer(extent,crs,size,grid_path,
            context=context,feedback=feedback)
        
        res = qgsTreatments.applyVectorClip(grid_layer,reprojected,out,
            context=context,feedback=feedback)
        
        return {self.OUTPUT: out }
        
    
    def name(self):
        return 'Create Mesh Layer'

    def displayName(self):
        return self.tr(self.name())

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return CreateMeshAlgorithm()