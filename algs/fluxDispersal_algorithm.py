# -*- coding: utf-8 -*-

"""
/***************************************************************************
 LightPollutionToolbox
                                 A QGIS plugin
 Light pollution indicators (focus on public lighting)
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-04-20
        copyright            : (C) 2020 by Mathieu Chailloux
        email                : mathieu@chailloux.org
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Mathieu Chailloux'
__date__ = '2020-04-20'
__copyright__ = '(C) 2020 by Mathieu Chailloux'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import os
import os.path
import tarfile
import processing
import glob

from pathlib import Path

from qgis.PyQt.QtCore import QCoreApplication, QVariant
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsField,
                       QgsProcessingException,
                       QgsProcessingAlgorithm,
                       QgsProcessingMultiStepFeedback,
                       QgsProcessingParameterField,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterRange,
                       QgsProcessingParameterRasterDestination)
from qgis import processing
from ..qgis_lib_mc import utils, qgsUtils, qgsTreatments

class LampType:

    SHP = 'SHP'
    SBP = 'SBP'
    LED = 'LED'
    IODURES_METAL = 'IM'
    HALOGENE = 'HAL'
    BALLON_FLUO = 'BF'
    FLUO_COMPACT = 'FC'
    TUBE_FLUO = 'TF'
    INDUCTION = 'IND'
    DICHROIQUE = 'DI'
    COSMOPOLIS = 'COS'
    
    LAMP_TYPE_DESCR = {
        SHP : 'Sodium Haut Pression'
    }

class FluxDispBaseAlg(QgsProcessingAlgorithm):

    INPUT = 'INPUT'
    FLUX_FIELD = 'FLUX_FIELD'
    RESOLUTION = 'RESOLUTION'
    OUTPUT = 'OUTPUT'
    
    DEFAULT_RES = 5.0
    
    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def group(self):
        return self.tr('Mapping')

    def groupId(self):
        return 'lpm'

    def initParams(self):
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.INPUT,
                self.tr('Lighting layer')))
        self.addParameter(
            QgsProcessingParameterField(
                self.FLUX_FIELD,
                self.tr('Flux field name'),
                parentLayerParameterName=self.INPUT,
                defaultValue="flux"))
        self.addParameter(
            QgsProcessingParameterNumber(
                self.RESOLUTION,
                self.tr('Resolution'),
                type=QgsProcessingParameterNumber.Double,
                defaultValue=self.DEFAULT_RES))
                
    def initOutput(self):
        self.addParameter(
            QgsProcessingParameterRasterDestination(
                self.OUTPUT,
                self.tr('Output layer')))
                
    def parseParams(self, parameters, context):
        self.input = self.parameterAsVectorLayer(parameters, self.INPUT, context)
        self.flux_field = self.parameterAsString(parameters,self.FLUX_FIELD,context)
        self.resolution = self.parameterAsInt(parameters,self.RESOLUTION,context)
        self.output = self.parameterAsOutputLayer(parameters,self.OUTPUT,context)
        
        if not self.input:
            raise QgsProcessingException("No input layer")
        if self.flux_field not in self.input.fields().names():
            raise QgsProcessingException("Field '" + "' does not exist")
        
        
class FluxDispAlg(FluxDispBaseAlg):
    
    TEMP_COUL_FIELD = 'TEMP_COUL_FIELD'
    RANGE = 'RANGE'
    FLUX_RADIUS_FIELD = 'flux_radius'
    
    def name(self):
        return 'fluxDisp'

    def displayName(self):
        return self.tr('Flux Disp')
        
    def createInstance(self):
        return FluxDispAlg()

    def initAlgorithm(self,config=None):
        self.initParams()
        self.initOutput()
        
    def createFluxDistField(self,in_field):
        if in_field not in self.input.fields().names():
            raise QgsProcessingException("Field '" + in_field + "' does not exist")
    
        out_field = self.FLUX_RADIUS_FIELD
        if out_field not in self.input.fields().names():
            field = QgsField(out_field, QVariant.Double)
            self.input.dataProvider().addAttributes([field])
            self.input.updateFields()
        
        self.input.startEditing()    
        for f in self.input.getFeatures():
            try:
                f[out_field] = float(f[in_field]) / 100
            except ValueError:
                f[out_field] = None
            self.input.updateFeature(f)
        self.input.commitChanges()
            
    
    def processAlgorithm(self, parameters, context, feedback):
        self.parseParams(parameters,context)
        self.createFluxDistField(self.flux_field)
        out = qgsTreatments.applyHeatmap(self.input, self.output,
            resolution=self.resolution, radius_field=self.FLUX_RADIUS_FIELD,
            weight_field=self.flux_field,context=context,feedback=feedback)
            
        return { self.OUTPUT : out }
        
        
class FluxDispTempCoulAlg(FluxDispBaseAlg):
    
    TEMP_COUL_FIELD = 'TEMP_COUL_FIELD'
    RANGE = 'RANGE'
    
    def name(self):
        return 'fluxDispTempCoul'

    def displayName(self):
        return self.tr('Flux Disp Temp Coul')
        
    def createInstance(self):
        return FluxDispTempCoulAlg()

    def initAlgorithm(self,config=None):
        self.initParams()
        self.addParameter(
            QgsProcessingParameterField(
                self.TEMP_COUL_FIELD,
                self.tr('Color temperature field'),
                parentLayerParameterName=self.INPUT))
        self.addParameter(
            QgsProcessingParameterRange(
                self.RANGE,
                self.tr('Color temperature range'),
                optional=True))
        self.initOutput()
    
    def processAlgorithm(self, parameters, context, feedback):
        input = self.parameterAsVectorLayer(parameters, self.INPUT, context)
        flux_field = self.parameterAsString(parameters,self.FLUX_FIELD,context)
        temp_coul_field = self.parameterAsString(parameters,self.TEMP_COUL_FIELD,context)

        return { self.OUTPUT : None }